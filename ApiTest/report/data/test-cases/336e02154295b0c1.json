{
  "uid" : "336e02154295b0c1",
  "name" : "test_login",
  "fullName" : "testcases.test_user.TestUser#test_login",
  "historyId" : "9f475056b86731e6f987ed0192674e5f",
  "time" : {
    "start" : 1648040761229,
    "stop" : 1648040761230,
    "duration" : 1
  },
  "status" : "broken",
  "statusMessage" : "TypeError: request() got an unexpected keyword argument 'header'",
  "statusTrace" : "self = <testcases.test_user.TestUser object at 0x000001DBE695F640>\n\n    @pytest.mark.smoke\n    # 登录接口\n    def test_login(self):\n    \n        url = \"http://47.107.116.139/phpwind/index.php?m=u&c=login&a=dorun\"\n        data = {\n            \"username\": \"admim\",\n            \"password\": \"admim123\",\n            \"csrf_token\": read_yaml(\"access_token\"),\n            \"backurl\": \"http://47.107.116.139/phpwind/\",\n            \"invite\": \"\"\n        }\n        header ={\n            \"Accept\": \"application/json, text/javascript, /; q=0.01\",\n            \"X-Requested-With\": \"XMLHttpRequest\"\n        }\n    \n        # res=requests.request(method=\"post\",url=url,data=data,header=header,cookies=TestRequest.php_cookie)\n>       res=requests.request(method=\"post\",url=url,data=data,header=header)\n\ntestcases\\test_user.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'post'\nurl = 'http://47.107.116.139/phpwind/index.php?m=u&c=login&a=dorun'\nkwargs = {'data': {'backurl': 'http://47.107.116.139/phpwind/', 'csrf_token': '55_vcdwKMHUm9jHks2hPrVd5FecaQpn4MfK9sSNkhXEYcK-O...123', ...}, 'header': {'Accept': 'application/json, text/javascript, /; q=0.01', 'X-Requested-With': 'XMLHttpRequest'}}\nsession = <requests.sessions.Session object at 0x000001DBE695FE20>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'header'\n\nC:\\Users\\86150\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\api.py:61: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "clear_extract",
    "time" : {
      "start" : 1648040759014,
      "stop" : 1648040759019,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "testcases"
  }, {
    "name" : "suite",
    "value" : "test_user"
  }, {
    "name" : "subSuite",
    "value" : "TestUser"
  }, {
    "name" : "host",
    "value" : "LAPTOP-29T4IPBI"
  }, {
    "name" : "thread",
    "value" : "3908-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_user"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "smoke" ]
  },
  "source" : "336e02154295b0c1.json",
  "parameterValues" : [ ]
}